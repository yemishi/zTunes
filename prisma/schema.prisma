generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  email      String       @unique
  username   String       @unique
  password   String?
  profile    ProfileType?
  isVerified Boolean?
  isArtist   ArtistType?
  createdAt  DateTime     @default(now())
  Account    Account[]

  @@map("User")
}

model Mix {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  songs      String[]
  coverPhoto String
  createdAt  DateTime @default(now())
}

model Playlist {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  isPublic   Boolean  @default(false)
  userId     String   @db.ObjectId
  songs      String[]
  coverPhoto String   @default("https://cdn-icons-png.flaticon.com/512/16/16249.png")
  createdAt  DateTime @default(now())
}

model Songs {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  urlSong   String
  artistId  String
  category  String[]
  track     TrackInfoType
  trackType String
}

model Album {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  releasedDate String
  artistName   String
  artistId     String   @db.ObjectId
  coverPhoto   String   @default("https://cdn-icons-png.flaticon.com/512/16/16249.png")
  createdAt    DateTime @default(now())
}

model PlayCount {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  musicId     String        @unique @db.ObjectId
  listenCount Int           @default(0)
  category    String[]
  users       UsersPlayed[]
  createdAt   DateTime      @default(now())
}

model FavoriteSongs {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  songs     String[]
  createdAt DateTime @default(now())
}

model LikedSongs {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  songs     String[]
  createdAt DateTime @default(now())
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  token_type        String?
  refresh_token     String? @db.String
  access_token      String? @db.String
  id_token          String? @db.String
  scope             String?
  session_state     String?
  expires_at        Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String  @db.ObjectId

  @@unique([provider, providerAccountId])
  @@map("account")
}

type ProfileType {
  avatar    String @default("https://i.pinimg.com/564x/a6/aa/5d/a6aa5d80551d471078f799e1473c20fb.jpg")
  birthDate String
}

type ArtistType {
  cover String
  about AboutType
}

type AboutType {
  summary String
  cover   String
}

type TrackInfoType {
  albumId    String?
  singleInfo SingleType?
}

type SingleType {
  coverPhoto   String
  releasedDate DateTime
  createdAt    DateTime @default(now())
}

type UsersPlayed {
  userId String @db.ObjectId
  count  Int    @default(1)
}
