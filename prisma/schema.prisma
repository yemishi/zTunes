generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  email      String       @unique
  username   String       @unique
  password   String?
  isVerified Boolean?
  profile    ProfileType?
  isArtist   ArtistType?
  isAdmin    Boolean?
  createdAt  DateTime     @default(now())
  Account    Account[]
  updatedAt  DateTime     @updatedAt
  Album      Album[]
  LikedSongs LikedSongs[]
  Followers  Followers[]

  @@map("User")
}

model Songs {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  urlSong    String
  artistId   String
  artistName String
  coverPhoto String
  category   String[]
  album      Album    @relation(fields: [albumId], references: [id])
  albumName  String
  albumId    String   @db.ObjectId
}

model PlayCount {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  songId      String        @unique @db.ObjectId
  listenCount Int           @default(0)
  category    String[]
  users       UsersPlayed[]
  updatedAt   DateTime      @updatedAt
  createdAt   DateTime      @default(now())
}

model Playlist {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  userId             String
  songs              PlaylistSongType[]
  isPublic           Boolean?
  desc               String?
  officialCategories String[]
  coverPhoto         String
  updatedAt          DateTime           @updatedAt
  createdAt          DateTime           @default(now())

  @@unique([title, userId])
}

model Album {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  type         String   @default("album")
  releasedDate String
  artistId     String   @db.ObjectId
  artist       User     @relation(fields: [artistId], references: [id])
  coverPhoto   String
  desc         String?
  createdAt    DateTime @default(now())
  songs        Songs[]
}

model SearchHistory {
  id       String         @id @default(auto()) @map("_id") @db.ObjectId
  userId   String
  historic HistoricType[]
}

model LikedSongs {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  songs     String[]
  createdAt DateTime @default(now())
}

model Followers {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  users     String[]
  createdAt DateTime @default(now())
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  token_type        String?
  refresh_token     String? @db.String
  access_token      String? @db.String
  id_token          String? @db.String
  scope             String?
  session_state     String?
  expires_at        Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String  @db.ObjectId

  @@unique([provider, providerAccountId])
  @@map("account")
}

type ProfileType {
  avatar    String @default("https://i.pinimg.com/564x/a6/aa/5d/a6aa5d80551d471078f799e1473c20fb.jpg")
  birthDate String
}

type ArtistType {
  cover   String
  summary String
}

type UsersPlayed {
  userId String @db.ObjectId
  count  Int    @default(1)
}

type PlaylistSongType {
  songId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

type HistoricType {
  refId      String
  type       String
  coverPhoto String
  title      String
  desc       String?
  createdAt  DateTime @default(now())
}
